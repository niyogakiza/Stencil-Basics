/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';

import {
  MatchResults,
} from '@stencil/router';

declare global {

  namespace StencilComponents {
    interface AppHome {

    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppProfile {
      'match': MatchResults;
    }
  }

  interface HTMLAppProfileElement extends StencilComponents.AppProfile, HTMLStencilElement {}

  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-profile': JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyApp {

    }
  }

  interface HTMLMyAppElement extends StencilComponents.MyApp, HTMLStencilElement {}

  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyBackdrop {

    }
  }

  interface HTMLMyBackdropElement extends StencilComponents.MyBackdrop, HTMLStencilElement {}

  var HTMLMyBackdropElement: {
    prototype: HTMLMyBackdropElement;
    new (): HTMLMyBackdropElement;
  };
  interface HTMLElementTagNameMap {
    'my-backdrop': HTMLMyBackdropElement;
  }
  interface ElementTagNameMap {
    'my-backdrop': HTMLMyBackdropElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-backdrop': JSXElements.MyBackdropAttributes;
    }
  }
  namespace JSXElements {
    export interface MyBackdropAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyModalBundle {
      'content': string;
      'open': () => void;
      'title': string;
    }
  }

  interface HTMLMyModalBundleElement extends StencilComponents.MyModalBundle, HTMLStencilElement {}

  var HTMLMyModalBundleElement: {
    prototype: HTMLMyModalBundleElement;
    new (): HTMLMyModalBundleElement;
  };
  interface HTMLElementTagNameMap {
    'my-modal-bundle': HTMLMyModalBundleElement;
  }
  interface ElementTagNameMap {
    'my-modal-bundle': HTMLMyModalBundleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-modal-bundle': JSXElements.MyModalBundleAttributes;
    }
  }
  namespace JSXElements {
    export interface MyModalBundleAttributes extends HTMLAttributes {
      'content'?: string;
      'title'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyModal {
      'content': string;
      'open': () => void;
      'title': string;
    }
  }

  interface HTMLMyModalElement extends StencilComponents.MyModal, HTMLStencilElement {}

  var HTMLMyModalElement: {
    prototype: HTMLMyModalElement;
    new (): HTMLMyModalElement;
  };
  interface HTMLElementTagNameMap {
    'my-modal': HTMLMyModalElement;
  }
  interface ElementTagNameMap {
    'my-modal': HTMLMyModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-modal': JSXElements.MyModalAttributes;
    }
  }
  namespace JSXElements {
    export interface MyModalAttributes extends HTMLAttributes {
      'content'?: string;
      'onOnClose'?: (event: CustomEvent) => void;
      'title'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
